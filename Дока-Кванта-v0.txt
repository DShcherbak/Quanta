Канвас має розмір 1000х1000 віртуальних пікселів, тобто при зміні розмірів сторінки квадрат канвасу лишається в пропорції 1:1, але може зменшуватися чи збільшуватися в розмірах.

Мова дає можливість малювати в двох режимах.
В першому програма це просто набір команд:
"circle(500, 500, 200);
setFigureColor(Color::Red);
rectangle(320, 240, 420, 340);"

Про другий режим (з функціями) - згодом.

Доступні команди:

circle(x, y, r) - коло радіусу r з центром в (х, у)
rectangle(x1, y1, x2, y2) - прямокутник з вершинами (х1, у1), (х2, у2)
line(x1, y1, x2, y2) - лінія з точки (х1, у1) в точку (х2, у2)
arc(x, y, r, a1, a2) - дуга кола радіусу r з центром в (х, у), починаючи з кута а1 до кута а2, кути в градусах, починаючи з напряму вісі Х і проти годинникової стрілки
polygon(x1, y1, x2, y2, x3, y3, ...) - приймає N (N >= 3) точок і будує по ним багатокутник
Всі змінні в цих командах мають тип int.

setFigureColor(Color::Red) - задає колір яким замальовується внутрішня частина фігури (за замовчуванням - білий)
setLineColor(Color::Blue) - задає колір яким малюються лінії та краї фігур (за замовчуванням - чорний)
setLineWidth(3) - задає товщину ліній в пікселях, за замовчуванням - 1.

Оголошення змінних (доступні 4 базові типи даних):

int x = 3;
color myColor = Color::Green;
bool gameOn = true;
float ratio = 2.3;

Арифметичні операції: +, -, *, /, %. 
Ділення цілих чисел ділить націло. Для отримання результату з плаваючою крапкою застосовується приведення одного з чисел до дійсного за допомогою функції decimal(x);
5 / 2 == 2            
5.0 / 2 == 2.5         
decimal(5) / 2 == 2.5

Інші операції для роботи з числами:
abs(int) -> int - модуль
round(float) -> int - округлення до ближчого
ceil(float), floor(float) -> int - округлення до більшого і меншого відповідно
sqrt(float) -> float - квадратний корінь
random(int a , int b) -> int - рандомне число в проміжку від a до b

Цикли:

for <var> in (<from>..<to>) {
  <commands>
}

Змінна в циклі for автоматично оголошується типу int, вказування типу не потрібно.
Порядок виконання від from до to, якщо from < to то змінна циклу збільшується на 1, інакше - зменшується
Обидві крайні точки включені в проміжок (цикл від <from> до <to> включно!)
Приклад:

for i in (5..1) {
    circle(500, 500, 100 * i); 
}

while(<condition>) {
   <commands>
}

Умова має мати тип bool, для виразів типу bool доступні такі операції:
<, >, <=, >=, ==, !=, &&, ||, !

Функції для анімації:

animate() - переведення в режим анімації. Всі подальші команди будуть виводитися не екран тільки після виклику функції frame();
frame() - намалювати наступний фрейм в режимі анімації. По суті, команди у режимі анімації малюються на віртуальному канвасі, і функція frame переносить його на екран
sleep(x) - Зупинити виконання на х мілісекунд.

Робота з кольорами
Color::<name> задає колір з кількох можливих варіантів (Red, Green, Blue, Yellow, Pink, ...) - планую дещо розширити
Color::Random дає випадковий колір.
rgb(red, green, blue) -> color повертає колір з відповідними r-g-b параметрами.
Зверніть увагу що назва типу починаєтсья з маленької літери "color", але при виборі кольору з єнама "Color::Green" колір пишеться з великої.

Конструкція if:

if (<condition>) {
   <commands>
} else {
   <commands>
}

"else if" наразі не підтримується, поки що треба робити вкладений else { if () {} }, можливо потім додамо.

Другий тип роботи - з функціями.

У випадку якщо оголошена принаймні одна функція, команди на верхньому рівні у файлі заборонені, все має бути розписано по функціям.
Сигнатура функції:

func <name>(<args>) -> <return-type> {
   <commands>
}

Аргументів може не бути, якщо функція нічого не повертає то -> <return-type> пропускається

Якщо код розбитий на функції, при запуску програми виконуються команди описані у функції "main".

За потреби використовувати глобальні змінні між функціями, вони оголошуються в спеціальному блоці global, який можна додати у файл на рівні з функціями:

Приклад:

func add(int x) -> int {
    return x + z;
}

global {
    int z = 30;
}

func drawSomething(int a) {
    circle(500, random(450, 550), add(a));
}

func main() {
   drawSomething(320);
   drawSomething(220);
}

Масиви:

array<int, 5> myNums = {1,2,3,4,5};
array<array<int, 3>, 3> grid = { {0, 1, 2}, {3, 4, 5}, {6, 7, 8} };
nums[3] = 9;
grid[0][2] = grid[0][3] + 10;

Івенти:
Для роботи з івентами існують дві спеціальні функції. Якщо вони є оголошені у файлі, вони автоматично прив'язуються до відповідного їм івента:
mouse(int x, int y) - при натисканні мишкою у канвасі в точці з координатами (х,у)
keyboard(int key) - при натисканні на клавіатуру, у випадку якщо канвас перебуває у фокусі
Під фокусом мається на увазі, що поки ви пишете код, ці натискання не фіксуються функцією keyboard. Однак якщо натиснути мишкою на канвас, він отримує фокус, і далі при натисканні на клавіатуру буде викликатися keyboard.
Також канвас отримує фокус при запуску програми.




